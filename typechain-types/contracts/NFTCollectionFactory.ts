/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace NFTCollectionFactory {
  export type CollectionInfoStruct = {
    contractAddress: AddressLike;
    name: string;
    symbol: string;
    description: string;
    creator: AddressLike;
    maxSupply: BigNumberish;
    mintPrice: BigNumberish;
    createdAt: BigNumberish;
    isActive: boolean;
  };

  export type CollectionInfoStructOutput = [
    contractAddress: string,
    name: string,
    symbol: string,
    description: string,
    creator: string,
    maxSupply: bigint,
    mintPrice: bigint,
    createdAt: bigint,
    isActive: boolean
  ] & {
    contractAddress: string;
    name: string;
    symbol: string;
    description: string;
    creator: string;
    maxSupply: bigint;
    mintPrice: bigint;
    createdAt: bigint;
    isActive: boolean;
  };
}

export interface NFTCollectionFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "collections"
      | "contractToId"
      | "createCollection"
      | "creationFee"
      | "creatorCollections"
      | "emergencyWithdrawFromCollection"
      | "factoryFeePercentage"
      | "getAllCollections"
      | "getCollection"
      | "getCollectionByAddress"
      | "getCollectionContract"
      | "getCreatorCollections"
      | "getDetailedCollectionInfo"
      | "getTotalCollections"
      | "owner"
      | "pauseCollection"
      | "renounceOwnership"
      | "resumeCollection"
      | "transferOwnership"
      | "updateCreationFee"
      | "updateFactoryFee"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CollectionCreated"
      | "CreationFeeUpdated"
      | "FactoryFeeUpdated"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "collections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractToId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creatorCollections",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawFromCollection",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "factoryFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCollections",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorCollections",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDetailedCollectionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCollections",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseCollection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumeCollection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCreationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFactoryFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "collections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractToId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawFromCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDetailedCollectionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFactoryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace CollectionCreatedEvent {
  export type InputTuple = [
    collectionId: BigNumberish,
    contractAddress: AddressLike,
    name: string,
    creator: AddressLike,
    maxSupply: BigNumberish
  ];
  export type OutputTuple = [
    collectionId: bigint,
    contractAddress: string,
    name: string,
    creator: string,
    maxSupply: bigint
  ];
  export interface OutputObject {
    collectionId: bigint;
    contractAddress: string;
    name: string;
    creator: string;
    maxSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreationFeeUpdatedEvent {
  export type InputTuple = [newCreationFee: BigNumberish];
  export type OutputTuple = [newCreationFee: bigint];
  export interface OutputObject {
    newCreationFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FactoryFeeUpdatedEvent {
  export type InputTuple = [newFeePercentage: BigNumberish];
  export type OutputTuple = [newFeePercentage: bigint];
  export interface OutputObject {
    newFeePercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTCollectionFactory extends BaseContract {
  connect(runner?: ContractRunner | null): NFTCollectionFactory;
  waitForDeployment(): Promise<this>;

  interface: NFTCollectionFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  collections: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        contractAddress: string;
        name: string;
        symbol: string;
        description: string;
        creator: string;
        maxSupply: bigint;
        mintPrice: bigint;
        createdAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  contractToId: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  createCollection: TypedContractMethod<
    [
      name: string,
      symbol: string,
      description: string,
      maxSupply: BigNumberish,
      mintPrice: BigNumberish
    ],
    [[bigint, string]],
    "payable"
  >;

  creationFee: TypedContractMethod<[], [bigint], "view">;

  creatorCollections: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  emergencyWithdrawFromCollection: TypedContractMethod<
    [collectionAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  factoryFeePercentage: TypedContractMethod<[], [bigint], "view">;

  getAllCollections: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [NFTCollectionFactory.CollectionInfoStructOutput[]],
    "view"
  >;

  getCollection: TypedContractMethod<
    [collectionId: BigNumberish],
    [NFTCollectionFactory.CollectionInfoStructOutput],
    "view"
  >;

  getCollectionByAddress: TypedContractMethod<
    [contractAddress: AddressLike],
    [NFTCollectionFactory.CollectionInfoStructOutput],
    "view"
  >;

  getCollectionContract: TypedContractMethod<
    [collectionId: BigNumberish],
    [string],
    "view"
  >;

  getCreatorCollections: TypedContractMethod<
    [creator: AddressLike],
    [bigint[]],
    "view"
  >;

  getDetailedCollectionInfo: TypedContractMethod<
    [collectionId: BigNumberish],
    [
      [NFTCollectionFactory.CollectionInfoStructOutput, bigint, boolean] & {
        info: NFTCollectionFactory.CollectionInfoStructOutput;
        currentSupply: bigint;
        isComplete: boolean;
      }
    ],
    "view"
  >;

  getTotalCollections: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pauseCollection: TypedContractMethod<
    [collectionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resumeCollection: TypedContractMethod<
    [collectionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateCreationFee: TypedContractMethod<
    [newCreationFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateFactoryFee: TypedContractMethod<
    [newFeePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "collections"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        contractAddress: string;
        name: string;
        symbol: string;
        description: string;
        creator: string;
        maxSupply: bigint;
        mintPrice: bigint;
        createdAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "contractToId"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "createCollection"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      description: string,
      maxSupply: BigNumberish,
      mintPrice: BigNumberish
    ],
    [[bigint, string]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "creationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "creatorCollections"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdrawFromCollection"
  ): TypedContractMethod<
    [collectionAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "factoryFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllCollections"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [NFTCollectionFactory.CollectionInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCollection"
  ): TypedContractMethod<
    [collectionId: BigNumberish],
    [NFTCollectionFactory.CollectionInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCollectionByAddress"
  ): TypedContractMethod<
    [contractAddress: AddressLike],
    [NFTCollectionFactory.CollectionInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCollectionContract"
  ): TypedContractMethod<[collectionId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCreatorCollections"
  ): TypedContractMethod<[creator: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getDetailedCollectionInfo"
  ): TypedContractMethod<
    [collectionId: BigNumberish],
    [
      [NFTCollectionFactory.CollectionInfoStructOutput, bigint, boolean] & {
        info: NFTCollectionFactory.CollectionInfoStructOutput;
        currentSupply: bigint;
        isComplete: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalCollections"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pauseCollection"
  ): TypedContractMethod<[collectionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resumeCollection"
  ): TypedContractMethod<[collectionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCreationFee"
  ): TypedContractMethod<[newCreationFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFactoryFee"
  ): TypedContractMethod<
    [newFeePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CollectionCreated"
  ): TypedContractEvent<
    CollectionCreatedEvent.InputTuple,
    CollectionCreatedEvent.OutputTuple,
    CollectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CreationFeeUpdated"
  ): TypedContractEvent<
    CreationFeeUpdatedEvent.InputTuple,
    CreationFeeUpdatedEvent.OutputTuple,
    CreationFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FactoryFeeUpdated"
  ): TypedContractEvent<
    FactoryFeeUpdatedEvent.InputTuple,
    FactoryFeeUpdatedEvent.OutputTuple,
    FactoryFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CollectionCreated(uint256,address,string,address,uint256)": TypedContractEvent<
      CollectionCreatedEvent.InputTuple,
      CollectionCreatedEvent.OutputTuple,
      CollectionCreatedEvent.OutputObject
    >;
    CollectionCreated: TypedContractEvent<
      CollectionCreatedEvent.InputTuple,
      CollectionCreatedEvent.OutputTuple,
      CollectionCreatedEvent.OutputObject
    >;

    "CreationFeeUpdated(uint256)": TypedContractEvent<
      CreationFeeUpdatedEvent.InputTuple,
      CreationFeeUpdatedEvent.OutputTuple,
      CreationFeeUpdatedEvent.OutputObject
    >;
    CreationFeeUpdated: TypedContractEvent<
      CreationFeeUpdatedEvent.InputTuple,
      CreationFeeUpdatedEvent.OutputTuple,
      CreationFeeUpdatedEvent.OutputObject
    >;

    "FactoryFeeUpdated(uint256)": TypedContractEvent<
      FactoryFeeUpdatedEvent.InputTuple,
      FactoryFeeUpdatedEvent.OutputTuple,
      FactoryFeeUpdatedEvent.OutputObject
    >;
    FactoryFeeUpdated: TypedContractEvent<
      FactoryFeeUpdatedEvent.InputTuple,
      FactoryFeeUpdatedEvent.OutputTuple,
      FactoryFeeUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
